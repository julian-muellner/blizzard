
types
    x : FiniteRange(-1,12)
    f : FiniteRange(0,1)
end

x = 4
while x > 0 && x < 6:
    f = Bernoulli(p)
    if f == 1:
        x = DiscreteUniform(1,3)
    else:
        x = x - 2
    end
end

# (0) -> (x:4, 1)
# (x:4, 1) --(p)---> (x:4, f:1, 3)
# (x:4, 1) --(1-p)-> (x:4, f:0, 3)
# (x:4, f:1, 3) --(1/3)-> (x:1, f:1, 5)
# (x:4, f:1, 3) --(1/3)-> (x:2, f:1, 5)
# (x:4, f:1, 3) --(1/3)-> (x:3, f:1, 5)
# (x:4, f:0, 3) -> (x:2, f:0, 6)
# (x:1, f:1, 5) --(p)---> (x:1, f:1, 3)
# (x:1, f:1, 5) --(1-p)---> (x:1, f:0, 3)
# (x:2, f:1, 5) --(p)-> (x:2, f:1, 3)
# (x:2, f:1, 5) --(1-p)-> (x:2, f:0, 3)
# (x:3, f:1, 5) --(p)-> (x:3, f:1, 3)
# (x:3, f:1, 5) --(1-p)-> (x:3, f:0, 3)
# (x:2, f:0, 6) --(p)-> (x:2, f:1, 3)
# (x:2, f:1, 6) --(1-p)-> (x:2, f:0, 3)
# (x:1, f:1, 3) --(1/3)-> (x:1, f:1, 5)
# (x:1, f:1, 3) --(1/3)-> (x:2, f:1, 5)
# (x:1, f:1, 3) --(1/3)-> (x:3, f:1, 5)
# (x:1, f:0, 3) --> (x:-1, f:0, 6)
# (x:2, f:1, 3) --(1/3)-> (x:1, f:1, 5)
# (x:2, f:1, 3) --(1/3)-> (x:2, f:1, 5)
# (x:2, f:1, 3) --(1/3)-> (x:3, f:1, 5)
# (x:2, f:0, 3) --> (x:0, f:0, 6)
# (x:3, f:1, 3) --(1/3)-> (x:1, f:1, 5)
# (x:3, f:1, 3) --(1/3)-> (x:2, f:1, 5)
# (x:3, f:1, 3) --(1/3)-> (x:3, f:1, 5)
# (x:3, f:0, 3) --> (x:1, f:0, 6)

# (x:-1, f:0, 6) --> (x:-1, f:0, 7) 
# (x:0, f:0, 6) --> (x:0, f:0, 7) 
# (x:1, f:0, 6) --(p)---> (x:1, f:1, 3)
# (x:1, f:0, 6) --(1-p)---> (x:1, f:0, 3)